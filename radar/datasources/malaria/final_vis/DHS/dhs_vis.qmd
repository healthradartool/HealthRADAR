---
execute:
  warning: false
  error: false
---

```{r, output = FALSE}
library(rdhs)
library(ggplot2)
library(stringr)
source("../theme_health_radar.R")
```

```{r}
indicators <- dhs_indicators()

# Find all indicators starting with ML
all_malaria_indicators = indicators[grepl("^ML", indicators$IndicatorId), c("IndicatorId", "Definition")]
knitr::kable(head(all_malaria_indicators))
```

```{r}
tags <- dhs_tags()

# Get the tags related to malaria
knitr::kable(tags[grepl("Malaria", tags$TagName), ])
```

```{r}
# Get the country codes of the frontline 4 of the elimination 8 countries
all_countries = dhs_countries(returnFields=c("CountryName","DHS_CountryCode"))

# Get the country codes of the frontline 4 of the elimination 8 countries
frontline4 = c("Botswana", "Namibia", "South Africa", "Eswatini")
elim8 = c("Botswana", "Namibia", "South Africa", "Eswatini", "Zambia", "Zimbabwe", "Mozambique", "Malawi")

# Get the country codes of the frontline 4 of the elimination 8 countries
f4_codes = all_countries[all_countries$CountryName %in% frontline4, "DHS_CountryCode"]
e8_codes = all_countries[all_countries$CountryName %in% elim8, "DHS_CountryCode"]

# Retrieve DHS data for the specified indicator, countries, and survey years
data1 <- dhs_data(indicatorIds = "ML_NETP_H_MOS",
                 countryIds = f4_codes,
                 surveyYearStart = 2000,
                 breakdown = "subnational")

# Remove rows with CharacteristicLabel starting with ".." to avoid double counting regions
filt_data = data1[!grepl("^\\..*", data1$CharacteristicLabel),]

# Filter the data for Namibia only
filt_data = filt_data[filt_data$CountryName == "Namibia",]
```

A faceted bar plot can be used to visualise the percentage of households with at least one insecticide-treated net (ITN) in each Namibian province at a small number of time points. 

```{r}
# Define a single color for the bars
single_color <- "#1b9e77"

# Plot the data as a bar plot
ggplot(filt_data, aes(x = as.factor(SurveyYear), y = Value, fill = single_color)) +
  # Create bar plot with identity statistic and no legend
  geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) + 
  # Use the health radar color scheme
  scale_fill_manual_health_radar() +
  # Set y-axis ticks increment to 10
  scale_y_continuous(breaks = seq(0, max(filt_data$Value, na.rm = TRUE), by = 10)) +  
  # Facet the plot by CharacteristicLabel, with 6 columns
  facet_wrap(~ CharacteristicLabel, ncol = 6) +
  # Apply the health radar theme
  theme_health_radar() +
  # Additional theme customizations specific to this plot
  theme(
    axis.text.x = element_text(angle = 45, hjust = 0.4),
    legend.position = "none",
    panel.background = element_rect(fill = "#F0F0F0", color = NA),
    panel.spacing = unit(0.5, "lines")) + 
    # Add titles and labels
  labs(
    title = "Namibian households with at least one mosquito net",
    x = "Year",
    y = "Percentage of Households",
    caption = str_wrap("The percentage of households in different regions of Namibia which have at least one mosquito net, based on subnational DHS survey data collected in 2006 and 2013. The Northeast region of Namibia has the highest percentage of households with at least one mosquito net in both 2006 and 2013, while the South region has the lowest. Every region saw an increase in the percentage of households with at least one mosquito net from 2006 to 2013. Note that the y-axis ranges from 0% to 57%. Source: DHS Data API - Malaria Indicator ML_NETP_H_MOS", width = 100))
```


```{r}
# Retrieve DHS data for the specified indicator, countries, and survey years
data2 <- dhs_data(indicatorIds = "ML_NETP_H_MNM",
                 countryIds = e8_codes,
                 surveyYearStart = 2000,
                 breakdown = "subnational")

# Keep only the rows where the level rank is 1 (national level data)
filt_data = data2[data2$LevelRank == 1,]

# Remove rows with CharacteristicLabel starting with ".." to avoid double counting regions
filt_data = filt_data[!grepl("^\\..*", filt_data$CharacteristicLabel),]
```

Generalised linear models can be used to fit an estimated mean value for the number of mosquito nets per household in various African countries. Rather than including all of these countries on one plot, the visualisation can be faceted to show multiple smaller plots - one for each country. 

```{r}
# Plot the data using ggplot2
ggplot(filt_data, aes(x = SurveyYear, y = Value), colour = single_color) +
  # Add points to the plot
  geom_point(size = 2, colour = single_color) +
  # Add a smooth line using a generalised linear model, with confidence interval shading
  geom_smooth(method = "glm", se = TRUE, alpha = 0.3, colour = single_color) +
  # Facet the plot by CountryName, with 3 columns and free y-axis scales
  facet_wrap(~ CountryName, ncol = 3, scales = "free_y") +
  # Apply the health radar theme and colors
  theme_health_radar() +
  scale_colour_manual_health_radar() +
  # Additional theme customizations specific to this plot
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5)
    ) +
  # Center the legend title
  guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
  # Add titles and labels
  labs(
    title = "Trend of mean number of mosquito nets per household",
    x = "Year",
    y = "Mean Nets Per Household",
    caption = str_wrap("The mean number of mosquito nets per household is estimated by fitting a generalised linear model (GLM) to subnational survey data collected in various years for a selection of Elimination 8 (E8) countries. These GLMs are shown as lines with their 95% confidence intervals displayed in grey, while the data on which the GLMs were built are shown as points. Note that the y-axis ranges differ between countries. Namibia and Eswatini each have only two recorded data points, making it difficult to draw reliable conclusions for either country. All four remaining countries show an increase in mean number of mosquito nets per household, with the mean number of nets per household being between 1 and 2 for their respective most recent survey year. Source: DHS Data API - Malaria Indicator ML_NETP_H_MNM", width = 95)
  )
```

A map is an effective method of visualising the mean number of mosquito nets per Zambian province. 

```{r}
# Filter the data for Zambia for the year 2018
d = data2[(data2$CountryName == "Zambia" & data2$SurveyYear == 2018),]

# Download the related spatial data frame object for Zambia
sp <- download_boundaries(surveyId = d$SurveyId[1], method = "sf")

# Match our values to the regions in the spatial data
m <- d$Value[match(sp$sdr_subnational_boundaries$REG_ID, d$RegionId)]
sp$sdr_subnational_boundaries$Value <- m

# Plot the spatial data using ggplot2
ggplot(sp$sdr_subnational_boundaries) + 
  # Add a filled polygon layer for each region
  geom_sf(aes(fill = Value), color = "lightgrey", size = 0.3) + 
  # Use the health radar continuous color scale for the fill
  scale_fill_continuous_health_radar(option = "plasma", na.value = "grey50", name = "Nets/household") +
  # Add titles and labels
  labs(
    title = "Mean number of mosquito nets per Zambian household (2018)",
    caption = str_wrap("The mean number of mosquito nets per household in Zambia, with Lusaka province showing the lowest value of approximately 1.5, and the Mochinga and Copperbelt provinces showing the highest values close to 2. Source: DHS Data API - Malaria Indicator ML_NETP_H_MNM", width = 60)) +
  # Conditional text color
  geom_sf_text(aes(label = DHSREGEN, color = ifelse(Value > quantile(Value, 0.1), "black", "white")), size = 3) +  
  scale_color_identity() +
  # Apply the health radar theme
  theme_health_radar() +
  # Remove x- and y-axes and grid lines
  theme(
    plot.title.position = "plot",
    axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank(),
    axis.title.y=element_blank(),
    axis.text.y=element_blank(),
    axis.ticks.y=element_blank(),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank())
```
An example of a more interactive mapped visualisation, this time of Malawi rather than Zambia, is shown below. 

```{r}
library(leaflet)

# Make a request to DHS data API for Malawi, for the specified indicator, and survey years
d2 <- dhs_data(countryIds = "MW",
              indicatorIds = "ML_FEVT_C_AML",
              breakdown = "subnational",
              surveyYearStart = 2016,
              returnGeometry = TRUE,
              f = "geojson")

# Convert the retrieved data to JSON format
m <- geojsonio::as.json(d2)

# Convert the JSON data to a spatial object
nc2 <- geojsonio::geojson_sp(m) 

# Create a color palette using the health radar colors for continuous data
# Using the first few colors from theme_health_radar_colours for the gradient
pal <- leaflet::colorNumeric(
  palette = colorRampPalette(theme_health_radar_colours[1:3])(100),
  domain = nc2$Value,
  na.color = "grey50"
)

# Plot the data using leaflet
leaflet(nc2[nc2$IndicatorId == "ML_FEVT_C_AML", ]) %>%
  # Add base map tiles
  addTiles() %>%
  # Add polygons to represent the regions
  addPolygons(
    stroke = TRUE,
    color = theme_health_radar_colours[7],  # Using the grey from our theme
    weight = 0.5,
    smoothFactor = 0.3,
    fillOpacity = 0.8,
    fillColor = ~pal(Value),
    # Add labels to the polygons with characteristic label and value
    label = ~paste0(CharacteristicLabel, ": ", formatC(Value, big.mark = ",")),
    labelOptions = leaflet::labelOptions(
      style = list(
        "font-weight" = "bold",
        "color" = theme_health_radar_colours[7]  # Using theme color for labels
      ),
      textsize = "13px",
      direction = "auto"
    )
  ) %>%
  # Add a legend to the map
  addLegend(
    pal = pal,
    values = ~Value,
    opacity = 1.0,
    title = "Malawi: children with fever who took antimalarial drugs (%)",
    position = "bottomright",
    labFormat = labelFormat()
  ) %>%
  # Set the initial view of the map to focus on Malawi
  setView(lng = 37, lat = -13, zoom = 5.5)
```


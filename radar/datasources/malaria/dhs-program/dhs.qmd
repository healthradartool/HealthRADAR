---
title: "The Demographic and Health Surveys Program"
description: "The Demographic and Health Surveys (DHS) Program has collected population survey data from over 90 countries for over 30 years."
date: 07/04/2024 # mm-dd-yyyy
image: "images/dhs.png"

categories:
  - malaria
  - epidemiology
  - country-level
  - annual
---

::: {.page-tabs .panel-tabset}


## Overview

<h2>About the data</h2>

The DHS (Demographic and Health Surveys) Program provides data on population, health, and nutrition through more than 400 surveys in over 90 countries. Data covers the following areas; *Population and Demographics, Fertility and Family Planning, Maternal and Child Health, Nutrition, HIV/AIDS and Other Infections, Malaria, & Gender and Domestic Violence*.

The DHS data are widely used by governments, NGOs, researchers, and policymakers to design and monitor health programs and policies. The surveys are conducted through face-to-face interviews with representative samples of households, and they use standardized questionnaires to ensure comparability across countries and over time.

Demographic health surveys are also unique for modelling as you can correlate across various datasets variables for example linking Malaria data on prevention and treatment to other factors in the population and demographics data to other health system indicators

<h2>Accessing the data</h2>

There are several options for accessing the data, each thoroughly explained in other resources.

::: panel-tabset
## DHS Website

[The DHS Program Access Instructions:](https://www.dhsprogram.com/data/Access-Instructions.cfm) This requires signing up for a free user account.

{{< video https://www.youtube.com/embed/videoseries?amp;list=PLagqLv-gqpTNBR0KcyrajAqKrFdsdIqqe >}}

## STATcompiler

[STATcompiler](https://www.statcompiler.com/en/), a graphical user interface tool for accessing and downloading the data in CSV format.

{{< video https://youtu.be/eXdPi6a_pQ0?list=PLagqLv-gqpTNRdiY391wMY0lzM_MuYpAL >}}

#### Accessing the data using STATcompiler

-   **Prevalence and Treatment**: Users can access data on malaria prevalence and treatment practices directly from the [STATcompiler](https://www.STATcompiler%20.com/en/). It allows for the creation of tables, charts, and maps that display malaria prevalence rates, treatment practices, and trends over time.

-   **Preventive Measures**: STATcompiler provides data on the ownership and use of ITNs, IRS coverage, and IPTp usage. Users can visualize how these preventive measures vary across different regions and demographic groups.

-   **Country and Regional Comparisons**: STATcompiler enables users to compare malaria data across different countries and regions. This comparative analysis helps in identifying best practices and areas that require more attention.

-   **Temporal Trends**: Users can analyze trends over time to see how malaria prevention and treatment efforts have evolved and their impact on malaria prevalence and morbidity

-   **Tailored Data Retrieval**: STATcompiler allows users to create custom tables based on specific indicators related to malaria. Users can filter data by variables such as age, sex, urban/rural residence, and wealth quintile.

-   **Indicator Selection**: Users can select specific indicators related to malaria, such as ITN usage, malaria prevalence among children under five, and access to malaria treatment. This customization helps in focusing on particular aspects of malaria control and prevention.

-   **Holistic Health Analysis**: STATcompiler can integrate malaria data with other health indicators, such as child mortality rates, nutrition status, and maternal health. This integration provides a comprehensive view of health challenges and the interconnections between different health issues.

-   **Multi-Indicator Analysis**: Users can analyse how malaria prevention and treatment efforts correlate with other health outcomes, facilitating a broader understanding of health dynamics.

-   **Interactive Tools**: STATcompiler offers an interactive and user-friendly interface, making it easy for users to navigate and extract relevant malaria data.

-   **Data Export**: Users can export data in various formats (e.g., Excel, CSV) for further analysis or reporting purposes.

#### Practical Applications using STATcompiler to access DHS program data

-   **Policy Making and Program Design**: Policymakers and program designers can access up-to-date malaria data, helping them create evidence-based strategies and allocate resources effectively.

-   **Research and Academic Studies**: Researchers can utilize STATcompiler to obtain detailed malaria data for their studies, facilitating in-depth analysis and publication of findings.

-   **Monitoring and Evaluation**: Health organizations can monitor the progress of malaria interventions by analysing trends and identifying gaps in coverage .

By leveraging the capabilities of STATcompiler, users can efficiently analyse and visualise malaria data collected by the DHS Program, leading to more informed decisions and effective interventions in malaria control and prevention.

## R package

The Demographic and Health Surveys (DHS) Program has developed an open-source R package [`rdhs`](https://docs.ropensci.org/rdhs/) for management and analysis of Demographic and Health Survey data. This includes functionality to:

1.  Access standard indicator data (i.e. [DHS STATcompiler](https://www.statcompiler.com/)) in R via the [DHS API](https://api.dhsprogram.com/).

2.  Identify surveys and datasets relevant to a particular analysis.

3.  Download survey datasets from the [DHS website](https://dhsprogram.com/data/available-datasets.cfm).

4.  Load datasets and associated metadata into R.

5.  Extract variables and combining datasets for pooled multi-survey analyses.
:::

<h2>What does the data look like?</h2>

**Description**

DHS data on malaria covers the following area for malaria

-   Prevalence and Treatment
-   Preventive Measures
-   Awareness and Behaviour
-   Health System and Access to Care
-   Impact of Malaria Interventions

The indicator dataset guide can found at [The DHS Program - Malaria](https://www.dhsprogram.com/topics/malaria/index.cfm)

![Malaria Data in DHS Surveys](images/malaria%20data%20in%20dhs%20survey.png)

## Visualisations

<h2>How to plot this data?</h2>

```{r}
#| include: false
#| message: false
#| warning: false

library("knitr")
library(tidyverse)
library(viridis)
library(sf)
library(RColorBrewer)
library(rdhs)


knitr::opts_chunk$set(echo = T, cache = T, warning = F, message = F, fig.pos = 'H', cache = T)
options(digits=4, scipen = 9)
```

```{r}
#| message: false
#| warning: false

indicators <- dhs_indicators()

# Display the first 5 indicators
#indicators[order(indicators$IndicatorId),][1:5,c("IndicatorId", "Definition")]

# Find all indicators starting with ML
all_malaria_indicators = indicators[grepl("^ML", indicators$IndicatorId), c("IndicatorId", "Definition")]
#all_malaria_indicators

# Find the definition for indicator ML_FEVT_C_AML
#indicators[indicators$IndicatorId == "ML_FEVT_C_AML", "Definition"]


# Find the definition for indicator ML_NETP_H_MOS
#indicators[indicators$IndicatorId == "ML_NETP_H_MOS", "Definition"]

tags <- dhs_tags()

# Get the tags related to malaria
#tags[grepl("Malaria", tags$TagName), ]

# Get the country codes of the frontline 4 of the elimination 8 countries
all_countries = dhs_countries(returnFields=c("CountryName","DHS_CountryCode"))

# Get the country codes of the frontline 4 of the elimination 8 countries
frontline4 = c("Botswana", "Namibia", "South Africa", "Eswatini")
elim8 = c("Botswana", "Namibia", "South Africa", "Eswatini", "Zambia", "Zimbabwe", "Mozambique", "Malawi")

# Get the country codes of the frontline 4 of the elimination 8 countries
f4_codes = all_countries[all_countries$CountryName %in% frontline4, "DHS_CountryCode"]
e8_codes = all_countries[all_countries$CountryName %in% elim8, "DHS_CountryCode"]

# Retrieve DHS data for the specified indicator, countries, and survey years
data1 <- dhs_data(indicatorIds = "ML_NETP_H_MOS",
                 countryIds = f4_codes,
                 surveyYearStart = 2000,
                 breakdown = "subnational")

# Remove rows with CharacteristicLabel starting with ".." to avoid double counting regions
filt_data = data1[!grepl("^\\..*", data1$CharacteristicLabel),]

# Filter the data for Namibia only
filt_data = filt_data[filt_data$CountryName == "Namibia",]

# Define a single color for the bars
single_color <- "#1b9e77"

# Plot the data as a bar plot
ggplot(filt_data, aes(x = as.factor(SurveyYear), y = Value, fill = single_color)) +
  # Create bar plot with identity statistic and no legend
  geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) + 
  # Use the health radar color scheme
  scale_fill_manual_health_radar() +
  # Set y-axis ticks increment to 10
  scale_y_continuous(breaks = seq(0, max(filt_data$Value, na.rm = TRUE), by = 10)) +  
  # Add titles and labels
  labs(
    title = "Households with at least one mosquito net in Namibia",
    subtitle = "Based on subnational DHS survey data",
    x = "Survey Year",
    y = "Percentage of Households",
    caption = "Source: DHS Data API - Malaria Indicator ML_NETP_H_MOS"
  ) +
  # Facet the plot by CharacteristicLabel, with 6 columns
  facet_wrap(~ CharacteristicLabel, ncol = 6) +
  # Apply the health radar theme
  theme_health_radar() +
  # Additional theme customizations specific to this plot
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none",
    panel.background = element_rect(fill = "#F0F0F0", color = NA),
    panel.spacing = unit(0.5, "lines")
  )

```



```{r}

# Retrieve DHS data for the specified indicator, countries, and survey years
data2 <- dhs_data(indicatorIds = "ML_NETP_H_MNM",
                 countryIds = e8_codes,
                 surveyYearStart = 2000,
                 breakdown = "subnational")

# Keep only the rows where the level rank is 1 (national level data)
filt_data = data2[data2$LevelRank == 1,]

# Remove rows with CharacteristicLabel starting with ".." to avoid double counting regions
filt_data = filt_data[!grepl("^\\..*", filt_data$CharacteristicLabel),]

# Plot the data using ggplot2
ggplot(filt_data, aes(x = SurveyYear, y = Value, colour = CountryName)) +
  # Add points to the plot
  geom_point(size = 2) +
  # Add a smooth line using a generalised linear model, with confidence interval shading
  geom_smooth(method = "glm", se = TRUE, alpha = 0.3) +
  # Facet the plot by CountryName, with 3 columns and free y-axis scales
  facet_wrap(~ CountryName, ncol = 3, scales = "free_y") +
  # Add titles and labels
  labs(
    title = "Trend of mean number of mosquito nets by E8 country",
    subtitle = "Based on subnational survey data from various years",
    x = "Survey Year",
    y = "Mean Nets Per Household",
    colour = "Country",
    caption = "Source: DHS Data API - Malaria Indicator ML_NETP_H_MNM"
  ) +
  # Apply the health radar theme and colors
  theme_health_radar() +
  scale_colour_manual_health_radar() +
  # Additional theme customizations specific to this plot
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5)
  ) +
  # Center the legend title
  guides(colour = guide_legend(title.position = "top", title.hjust = 0.5))

```

Subnational data - mean number of mosquito nets by E8 country Each point represents the mean number of nets in a specific subregion of the country. The line represents the trend over time for each country. The shaded area represents the 95% confidence interval for the trend line. Add brief descriptions for each one.

```{r}

# Filter the data for Zambia for the year 2018
d = data2[(data2$CountryName == "Zambia" & data2$SurveyYear == 2018),]

# Download the related spatial data frame object for Zambia
sp <- download_boundaries(surveyId = d$SurveyId[1], method = "sf")

# Match our values to the regions in the spatial data
m <- d$Value[match(sp$sdr_subnational_boundaries$REG_ID, d$RegionId)]
sp$sdr_subnational_boundaries$Value <- m

# Plot the spatial data using ggplot2
ggplot(sp$sdr_subnational_boundaries) + 
  # Add a filled polygon layer for each region
  geom_sf(aes(fill = Value), color = "lightgrey", size = 0.3) + 
  # Use the health radar continuous color scale for the fill
  scale_fill_continuous_health_radar(option = "plasma", na.value = "grey50", name = "Value") +
  # Add titles and labels
  labs(
    title = "Mean number of mosquito nets in Zambia",
    subtitle = "Based on subnational DHS survey data from 2018",
    caption = "Source: DHS Data API - Malaria Indicator ML_NETP_H_MNM",
    x = "Longitude",
    y = "Latitude"
  ) +
  # Apply the health radar theme
  theme_health_radar() +
  # Center the legend title
  guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5))

```

```{r}
library(leaflet)

# Make a request to DHS data API for Malawi, for the specified indicator, and survey years
d2 <- dhs_data(countryIds = "MW",
              indicatorIds = "ML_FEVT_C_AML",
              breakdown = "subnational",
              surveyYearStart = 2016,
              returnGeometry = TRUE,
              f = "geojson")

# Convert the retrieved data to JSON format
m <- geojsonio::as.json(d2)

# Convert the JSON data to a spatial object
nc2 <- geojsonio::geojson_sp(m) 

# Create a color palette using the health radar colors for continuous data
# Using the first few colors from theme_health_radar_colours for the gradient
pal <- leaflet::colorNumeric(
  palette = colorRampPalette(theme_health_radar_colours[1:3])(100),
  domain = nc2$Value,
  na.color = "grey50"
)

# Plot the data using leaflet
leaflet(nc2[nc2$IndicatorId == "ML_FEVT_C_AML", ]) %>%
  # Add base map tiles
  addTiles() %>%
  # Add polygons to represent the regions
  addPolygons(
    stroke = TRUE,
    color = theme_health_radar_colours[7],  # Using the grey from our theme
    weight = 0.5,
    smoothFactor = 0.3,
    fillOpacity = 0.8,
    fillColor = ~pal(Value),
    # Add labels to the polygons with characteristic label and value
    label = ~paste0(CharacteristicLabel, ": ", formatC(Value, big.mark = ",")),
    labelOptions = leaflet::labelOptions(
      style = list(
        "font-weight" = "bold",
        "color" = theme_health_radar_colours[7]  # Using theme color for labels
      ),
      textsize = "13px",
      direction = "auto"
    )
  ) %>%
  # Add a legend to the map
  addLegend(
    pal = pal,
    values = ~Value,
    opacity = 1.0,
    title = "Malawi: children with fever who took antimalarial drugs (%)",
    position = "bottomright",
    labFormat = labelFormat()
  ) %>%
  # Set the initial view of the map to focus on Malawi
  setView(lng = 37, lat = -13, zoom = 5.5)

```

## Modelling Example

<h2>How can this data be used in disease modelling?</h2>

```{r}
#| include: false
#| message: false
#| warning: false

library(here)
library(deSolve)
source(here::here("radar/theme_health_radar.R"))


knitr::opts_chunk$set(echo = T, cache = T, warning = F, message = F, fig.pos = 'H', cache = T)
options(digits=4, scipen = 9)
```

The DHS dataset has various components that can be incorporated into malaria modelling, particularly with respect to health systems and interventions. Upon exploring the data, many indicators from the DHS surveys may be associated with the system dynamics of malaria. We include a few examples below:

-   Number of children age 6-59 months tested for malaria using microscopy

-   Percentage of pregnant women who slept under a long-lasting insecticide treated net (LLIN) the night before the survey

-   Percentage of mosquito nets received from immunization visit, private health facility, religious institution or community health worker

-   Households with at least one insecticide treated net (ITN) and/or indoor residual spraying (IRS) in the 12 months preceding the survey

-   Among children with fever in the two weeks preceding the survey for whom advice or treatment was sought, the percentage for whom the source was a government health center, traditional practitioner, shop or private doctor

In the simple example below, we obtain data on Insecticide Treated Nets (ITNs) access and usage rates in Mozambique, and estimate the effective coverage of ITNs. This represents the proportion of the population protected from malaria transmission in a particular country.

### Preparing the data

The relevant indicators are sourced from the DHS dataset.

```{r}
#| message: false
#| warning: false

## Source ITN coverage and usage data

indicators <- dhs_indicators()
all_malaria_indicators <- indicators |> 
  filter(Level1 == "Malaria") |> 
  select(c("IndicatorId", "Definition"))

# Select indicators

# ML_NETP_H_IT2: Percentage of households with at least one insecticide-treated mosquito net (ITN) for every two persons who stayed in the household the previous night
# ML_ITNU_N_ITN: Percentage of existing insecticide treated nets used the night before the survey

access_data <- dhs_data(indicatorIds = "ML_NETP_H_IT2",
                  countryIds = "MZ",
                  surveyYearStart = 2000)

usage_data <- dhs_data(indicatorIds = "ML_ITNU_N_ITN",
                          countryIds = "MZ",
                          surveyYearStart = 2000)

```

### Model assumptions

We make a few assumptions about ITNs in the model, explicitly stated here. We assume:

-   Survey year correlates with ITN distribution year, and access to mosquito nets in any given household is a result of distribution in a given year. There is no additional distribution in between these specific years.

-   Net usage remains consistent until a new survey is conducted.

-   Net functionality and effectiveness wanes annually, and ITNs are considered lost/expired after three years.

-   Operational effectiveness accounts for factors such as the peak biting hours of a particular vector versus the time actually spent under the net. In some communities people spend their evenings at *cuca/spaza* shops or other informal outdoor settings, leaving them vulnerable to outdoor biting from exophagic vectors.

```{r}

# Obtain survey and ITN distribution years
years <- access_data |> 
  pull(SurveyYear) 

itn_access <- access_data |>
  arrange(SurveyYear) |>
  select(SurveyYear, Value) |> 
  complete(SurveyYear = full_seq(c(SurveyYear, 2024), 1), fill = list(Value = 0)) |> 
  pull(Value)

itn_use <- usage_data |>
  arrange(SurveyYear) |>
  select(SurveyYear, Value) |> 
  complete(SurveyYear = full_seq(c(SurveyYear, 2024), 1)) |> 
  fill(Value, .direction = "down") |> 
  pull(Value)

itn_eff <- c(0.95, 0.90, 0.85) # Annual ITN attrition/loss in physical and chemical effectiveness

opp_eff <- 0.5 # Operational effectiveness of ITN at preventing transmission

```

### Coverage

Coverage is dependent on access to ITNs at the distribution rate of two persons per net, however, the user must consider a loss in access by reductions in ITN effectiveness over time.

To demonstrate the loss in net functionality and effectiveness as they degrade and undergo attrition, the user can use the concept of convolution to represent a reduction in net access in the population. The initial series of values (net access) is reduced by another series of values (net effectiveness) at each time step by "filtering" the initial series through the reducing series. For example,

-   one year of net access and usage results in 5% loss,

-   two years result in 10% loss, and

-   three years result in 15% loss.

Ninety five percent (95%) of nets received in year one will remain at the end of the year. At the end of year two, we have 95% of nets received in year two, as well as 90% of the nets previously received in year one. In year three, 95% of any new nets will remain, 90% of the nets received in year two, and 85% of the nets previously received in year one. After four years, 0% of the nets received in year one remain, as well as 90% and 85% of nets received in years two and three, respectively.

```{r}

itn_cov <- convolve(itn_access/100, rev(itn_eff), type = "open")
itn_cov <- itn_cov[1:length(itn_access)]  # Match the length of the distribution data
itn_cov_rounded <- round(itn_cov, 3)

```

**Effective coverage**

Coverage is further considered effective if it meets the minimum access of one ITN per two persons, the net is adequately used (and as a proxy, used the night prior to the survey), and is operationally effective at preventing bites from an infectious mosquito. Effective coverage represents the proportion of people who are actually protected from ongoing transmission, and is always less than the stated coverage.

```{r}

# Number of people with access effectively covered by available ITNs
eff_cov <- itn_cov_rounded * (itn_use/100) * opp_eff

# Create a data frame for the plot
itn_data <- data.frame(
  Year = full_seq(c(years, 2024), 1),
  Coverage = itn_cov_rounded,
  "Effective Coverage" = eff_cov) |> 
  pivot_longer(!Year, names_to = "ITN.characteristic", values_to = "Value")

# Create the ITN coverage plot
ggplot(itn_data) +
  geom_line(aes(x = Year, y = Value, colour = ITN.characteristic)) +
  theme_health_radar() +
  scale_colour_manual_health_radar() +
  scale_x_continuous(breaks = seq(2011, 2024, 2)) +
  scale_y_continuous(
    name = "Proportion of People",
    limits = c(0, 1), 
    labels = scales::percent) + 
  labs(
    title = "Effective ITN Coverage in Mozambique",
    subtitle = "Malaria prevention through access and use of ITNs",
    x = "Year",
    colour = "ITN characteristic",
    caption = str_wrap("Effective coverage levels of households in Mozambique. ITN coverage increases after a mass distribution campaign, and wanes until the next campaign. After three years ITNs are considered ineffective due to net survival data (not described here). Countries should plan distribution campaigns timely to avoid any gaps in coverage, as is seen in Mozambique in 2014 and 2021. Effective coverage is below coverage due to imperfect usage and challenges in operational effectiveness. Source: DHS Data API - Malaria Indicators ML_NETP_H_IT2 & ML_ITNU_N_ITN")) +
  theme(legend.position = "inside",
        legend.justification.inside = c(1, 1))
  

```

### Implications for transmission and incidence

In epidemiology, the measure of intensity of disease transmission is also known as the force of infection. Simply put, this is the rate at which susceptible individuals become infected per unit time. Three main factors determine this: the proportion of the mosquito population that is infectious, the contact rate between infectious mosquitoes and susceptible humans, and the probability that a bite from an infectious mosquito transmits disease to a susceptible human. The same applies with respect to infectious humans and susceptible mosquitoes.

Mosquito nets are intended to prevent transmission by reducing the contact rate between humans and mosquitoes, and we assume that the population that is effectively covered by a mosquito net is no longer vulnerable to infection. As such, the force of infection now excludes those protected by ITNs, and we may anticipate changes incidence when ITN effective coverage is high.

```{r}
# Time points for the simulation
Y = 13 # Years of simulation
times <- seq(0, 365*Y, by = 1)

itndaily_data <- approx(2011:2024, eff_cov, n = length(times), method = "constant", rule = 2)$y
itnfunc <- approxfun(itndaily_data, method = "linear", rule = 2)


# SEACR-SEI model
seacr <- function(times, start, parameters, itnfunc) { 
  with(as.list(c(start, parameters)), {
    P = S + E + A + C + R  
    M = Sm + Em + Im
    m = M / P

    ITN <- itnfunc(times)
    seas = 1+amp*cos(2*pi*(times/365 - phi))
    
    # Force of infection
    Infectious = C + zeta_a*A #infectious reservoir
    lambda.v <- a*M/P*b*Im/M*seas*(1-ITN) #introduce seasonality and ITNss
    lambda.h <- a*c*Infectious/P*seas*(1-ITN)
    
    # Differential equations/rate of change
    dSm = mu_m*M - lambda.h*Sm - mu_m*Sm
    dEm = lambda.h*Sm - (gamma_m + mu_m)*Em
    dIm = gamma_m*Em - mu_m*Im
    
    dS = mu_h*P - lambda.v*S + rho*R - mu_h*S
    dE = lambda.v*S - (gamma_h + mu_h)*E
    dA = pa*gamma_h*E - (delta + mu_h)*A
    dC = (1-pa)*gamma_h*E - (r + mu_h)*C
    dR = delta*A + r*C - (rho + mu_h)*R
    
    dCInc = lambda.v*S
    
    
    # Output
    list(c(dSm, dEm, dIm, dS, dE, dA, dC, dR, dCInc))
  })
}


# Initial values for compartments
initial_state <- c(Sm = 1000000, # susceptible mosquitoes
                   Em = 100000, # exposed and infected mosquitoes
                   Im = 200000, # infectious mosquitoes
                   S = 350000, # susceptible humans
                   E = 200000, # exposed and infected humans
                   A = 10000, # asymptomatic and infectious humans
                   C = 100000, # clinical and symptomatic humans
                   R = 0, # recovered and semi-immune humans
                   CInc = 0 # cumulative incidence
)
# Country-specific parameters should be obtained from literature review and expert knowledge
parameters <- c(a = 0.25, # human biting rate
                b = 0.4, # probability of transmission from mosquito to human
                c = 0.4, # probability of transmission from human to mosquito
                r = 1/21, # rate of loss of infectiousness after treatment
                rho = 1/160, # rate of loss of immunity after recovery
                delta = 1/150, # natural recovery rate
                zeta_a = 0.2, # relative infectiousness of of asymptomatic infections
                pa = 0.2, # probability of asymptomatic infection
                mu_m = 1/10, # birth and death rate of mosquitoes
                mu_h = 1/(60*365), # birth and death rate of humans
                gamma_m = 1/10, # extrinsic incubation rate of parasite in mosquitoes
                gamma_h = 1/10, # extrinsic incubation rate of parasite in humans
                amp = 0.7, #amplitude of seasonality
                phi = 200 #phase angle; start of season
                )

# Run the model

out <- ode(y = initial_state, 
           times = times, 
           func = seacr, 
           parms = parameters,
           itnfunc = itnfunc)

# Post-processing model output into a dataframe

df <- as_tibble(as.data.frame(out)) |> 
  mutate(P = S + E + A + C + R,
         M = Sm + Em + Im,
         Inc = c(0, diff(CInc))) |> 
  pivot_longer(cols = -time, names_to = "variable", values_to = "value") |> 
  mutate(date = ymd("2011-01-01") + time)

# Plotting incidence

df |> 
  filter(variable %in% "Inc", time > 50) |> 
  ggplot()+
  geom_line(aes(x = date, y = value), colour = theme_health_radar_colours[4]) +
  theme_health_radar() +
  scale_colour_manual_health_radar() +
  labs(x = "Year", 
         y = "Incidence", 
         title = "Daily country-wide incidence",
         caption = str_wrap("This plot illustrates the daily country-wide incidence of malaria from 2011 to 2024. We see a seasonal pattern over the years, and a reduction in incidence following mass distribution campaigns in 2015, 2018 and 2022. The lowest incidence is in 2019, after a peak effective coverage of 50% of the population at risk in 2018. In addition, we see how incidence steadily increases as the effectiveness of ITNs/LLINs wanes. Source: Model output.")) +
    theme_health_radar() +
      scale_x_date(date_breaks = "2 years",
               date_labels = "%Y"
               )  # Set x-axis breaks to multiples of 2 years


```



:::
